<#@ template debug="false" hostspecific="false" language="C#" inherits="TemplateBase" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#pragma warning disable CS1591 
// <auto-generated />
#nullable enable
using System;
using System.Threading.Tasks;
using Kamishibai;

namespace <#= Namespace #>
{
    public partial interface IPresentationService : IPresentationServiceBase
    {
<#
foreach(var navigationInfo in NavigationInfos)
{
#>
        Task<bool> NavigateTo<#= navigationInfo.NavigationName #>Async(<#= navigationInfo.NavigationParameters #>);
<#  
}

foreach(var openWindowInfo in OpenWindowInfos)
{
#>
        Task<IWindow> Open<#= openWindowInfo.NavigationName #>WindowAsync(<#= openWindowInfo.NavigationParameters #>);
<#  
}

foreach(var openDialogInfo in OpenDialogInfos)
{
#>
        Task<bool> Open<#= openDialogInfo.NavigationName #>DialogAsync(<#= openDialogInfo.NavigationParameters #>);
<#  
}
#>
    }

    public partial class PresentationService : PresentationServiceBase, IPresentationService
    {
        private readonly IServiceProvider _serviceProvider;

        public PresentationService(IServiceProvider serviceProvider, INavigationFrameProvider navigationFrameProvider, IWindowService windowService)
            : base (serviceProvider, navigationFrameProvider, windowService)
        {
            _serviceProvider = serviceProvider;
        }

<#
foreach(var navigationInfo in NavigationInfos)
{
#>
        public Task<bool> NavigateTo<#= navigationInfo.NavigationName #>Async(<#= navigationInfo.NavigationParameters #>)
        {
            return NavigateAsync(
                new <#= navigationInfo.ViewModelName #>(
                    <#= navigationInfo.ConstructorParameters #>
                ), 
                frameName);
        }
<#  
}

foreach(var openWindowInfo in OpenWindowInfos)
{
#>
        public Task<IWindow> Open<#= openWindowInfo.NavigationName #>WindowAsync(<#= openWindowInfo.NavigationParameters #>)
        {
            return OpenWindowAsync(
                new <#= openWindowInfo.ViewModelName #>(
                    <#= openWindowInfo.ConstructorParameters #>
                ), 
                owner,
                options);
        }
<#  
}

foreach(var openDialogInfo in OpenDialogInfos)
{
#>
        public Task<bool> Open<#= openDialogInfo.NavigationName #>DialogAsync(<#= openDialogInfo.NavigationParameters #>)
        {
            return OpenDialogAsync(
                new <#= openDialogInfo.ViewModelName #>(
                    <#= openDialogInfo.ConstructorParameters #>
                ), 
                owner,
                options);
        }
<#  
}
#>
    }
}